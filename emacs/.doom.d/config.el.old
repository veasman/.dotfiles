;;; $DOOMDIR/config.el -*- lexical-binding: t; -*-

;; Place your private configuration here! Remember, you do not need to run 'doom
;; sync' after modifying this file!


;; Some functionality uses this to identify you, e.g. GPG configuration, email
;; clients, file templates and snippets. It is optional.
(setq user-full-name "John Doe"
      user-mail-address "john@doe.com")

;; Doom exposes five (optional) variables for controlling fonts in Doom:
;;
;; - `doom-font' -- the primary font to use
;; - `doom-variable-pitch-font' -- a non-monospace font (where applicable)
;; - `doom-big-font' -- used for `doom-big-font-mode'; use this for
;;   presentations or streaming.
;; - `doom-unicode-font' -- for unicode glyphs
;; - `doom-serif-font' -- for the `fixed-pitch-serif' face
;;
;; See 'C-h v doom-font' for documentation and more examples of what they
;; accept. For example:
;;
;;(setq doom-font (font-spec :family "Fira Code" :size 12 :weight 'semi-light)
;;      doom-variable-pitch-font (font-spec :family "Fira Sans" :size 13))
;;
;; If you or Emacs can't find your font, use 'M-x describe-font' to look them
;; up, `M-x eval-region' to execute elisp code, and 'M-x doom/reload-font' to
;; refresh your font settings. If Emacs still can't find your font, it likely
;; wasn't installed correctly. Font issues are rarely Doom issues!

;; There are two ways to load a theme. Both assume the theme is installed and
;; available. You can either set `doom-theme' or manually load a theme with the
;; `load-theme' function. This is the default:
(setq doom-theme 'doom-one)

;; This determines the style of line numbers in effect. If set to `nil', line
;; numbers are disabled. For relative line numbers, set this to `relative'.
(setq display-line-numbers-type 'relative)

;; If you use `org' and don't want your org files in the default location below,
;; change `org-directory'. It must be set before org loads!
(setq org-directory "~/.doom.d/OrgFiles")

(setq doom-font (font-spec :family "Fira Code NF" :size 13 :weight 'medium))

;; Whenever you reconfigure a package, make sure to wrap your config in an
;; `after!' block, otherwise Doom's defaults may override your settings. E.g.
;;
;;   (after! PACKAGE
;;     (setq x y))
;;
;; The exceptions to this rule:
;;
;;   - Setting file/directory variables (like `org-directory')
;;   - Setting variables which explicitly tell you to set them before their
;;     package is loaded (see 'C-h v VARIABLE' to look up their documentation).
;;   - Setting doom variables (which start with 'doom-' or '+').
;;
;; Here are some additional functions/macros that will help you configure Doom.
;;
;; - `load!' for loading external *.el files relative to this one
;; - `use-package!' for configuring packages
;; - `after!' for running code after a package has loaded
;; - `add-load-path!' for adding directories to the `load-path', relative to
;;   this file. Emacs searches the `load-path' when you load packages with
;;   `require' or `use-package'.
;; - `map!' for binding new keys
;;
;; To get information about any of these functions/macros, move the cursor over
;; the highlighted symbol at press 'K' (non-evil users must press 'C-c c k').
;; This will open documentation for it, including demos of how they are used.
;; Alternatively, use `C-h o' to look up a symbol (functions, variables, faces,
;; etc).
;;
;; You can also try 'gd' (or 'C-c c d') to jump to their definition and see how
;; they are implemented.

;; Set frame transparency
(set-frame-parameter (selected-frame) 'alpha '(90 . 90))
(add-to-list 'default-frame-alist `(alpha . ,'(90 . 90)))
(set-frame-parameter (selected-frame) 'fullscreen 'maximized)
(add-to-list 'default-frame-alist '(fullscreen . maximized))

;; Line numbers enable when needed
(dolist (mode '(text-mode-hook
               prog-mode-hook
               conf-mode-hook))
 (add-hook mode (lambda () (display-line-numbers-mode 'relative))))

;; Line numbers disable when needed
(dolist (mode '(org-mode-hook
               term-mode-hook
               shell-mode-hook
               eshell-mode-hook))
 (add-hook mode (lambda () (display-line-numbers-mode 0))))

;; (defun cvm/exwm-update-class ()
;;   (exwm-workspace-rename-buffer exwm-class-name))

;; ;; Set the default number of workspaces
;; (setq exwm-workspace-number 9)

;; ;; When window "class" updates, use it to set the buffer name
;; (add-hook 'exwm-update-class-hook #'cvm/exwm-update-class)

;; ;; These keys should always pass through to Emacs
;; (setq exwm-input-prefix-keys
;;   '(?\C-x
;;     ?\C-u
;;     ?\C-d
;;     ?\C-h
;;     ?\M-`
;;     ?\M-&
;;     ?\M-:
;;     ?\C-\M-j ;; Buffer list
;;     ?\C-\ )) ;; Ctrl+SPC

;; ;; Ctrl+Q will enable the next key to be sent directly
;; (define-key exwm-mode-map [?\C-q] 'exwm-input-send-next-key)

;; ;; Set up global key bindings. These always work, no matter the input state
;; ;; Keep in mind that changing this list after EXWM initalizes has no effect
;; (setq exwm-input-global-keys
;;     `(
;;       ;; Reset to line-mode C-c C-k switches to char-mode via exwm-input-release-keyboard
;;       ([?\s-r] . exwm-reset)

;;       ;; Move between windows
;;       ([?\s-h] . windmove-left)
;;       ([?\s-l] . windmove-right)
;;       ([?\s-k] . windmove-up)
;;       ([?\s-j] . windmove-down)

;;       ;; Launch applications with shell command
;;       ([?\s-p] . (lambda (command)
;;                     (interactive (list (read-shell-command "$ ")))
;;                     (start-process-shell-command command nil command)))

;;       ;; Switch workspace
;;       ([?\s-w] . exwm-workspace-switch)

;;       ;; 's-N': Switch to workspace at N
;;       ,@(mapcar (lambda (i)
;;                   `(,(kbd (format "s-%d" i)) .
;;                     (lambda ()
;;                       (interactive)
;;                       (exwm-workspace-switch-create ,i))))
;;                 (number-sequence 0 9))))

;; (require 'exwm-randr)
;; (exwm-randr-enable)
;; (start-process-shell-command "xrandr" nil "xrandr --output Virtual1 --primary --mode 1920x1080 -pos 1920x0 --rotate normal --output Virtual2 --mode 1920x1080 --pos 0x0 --rotate normal")

;; (setq exwm-randr-workspace-monitor-plist '(1 "Virtual2" 2 "Virtual2" 3 "Virtual2" 4 "Virtual2" 5 "Virtual2"))

;; (setq exwm-workspace-warp-cursor t)

;; (setq mouse-autoselect-window t
;;       focus-follows-mouse t)

;; (exwm-enable)

(setq mouse-wheel-progressive-speed nil)

(use-package! org-auto-tangle
  :defer t
  :hook (org-mode . org-auto-tangle-mode)
  :config
  (setq org-auto-tangle-default t))
